<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="renderer" content="webkit">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <title>accounts</title>
    <link type="text/css" rel="stylesheet" href="~/layuiadmin/layui/css/layui.css" media="all" />
    <link type="text/css" rel="stylesheet" href="~/layuiadmin/style/admin.css" media="all">
</head>
<body>
    <div class="layui-fluid">
        <div class="layui-card">
            <div class="layui-form layui-card-header layuiadmin-card-header-auto" id="LAY-account-list">
                <div class="layui-form-item">
                    <div class="layui-input-wrap layui-inline">
                        <div class="layui-input-prefix">
                            <i class="layui-icon layui-icon-username"></i>
                        </div>
                        <input type="text" name="name" value="" placeholder="用户名" class="layui-input" lay-affix="clear">
                    </div>

                    <div class="layui-input-wrap layui-inline">
                        <div class="layui-input-prefix">
                            <i class="layui-icon layui-icon-cellphone"></i>
                        </div>
                        <input type="text" name="phone" placeholder="手机号" lay-affix="clear" class="layui-input">
                    </div>

                    <button class="layui-btn" lay-submit lay-filter="demo-table-search">搜索</button>

                </div>

            </div>
            <div class="layui-card-body">
                <!--工具栏-->
                <script type="text/html" id="ID-table-account-toolbar">
                    <div  type="button" class="layui-btn layui-btn-sm layui-btn-primary" lay-on="add" title="添加账号">
                       添加
                    </div>

                </script>

                <!--行编辑按钮-->
                <script type="text/html" id="cell-operation">
                    <div  type="button" class="layui-btn layui-btn-sm layui-btn-primary"  lay-event="edit" title="编辑账号">
                     编辑
                    </div>
                </script>
                <!--table-->
                <table class="layui-hide layui-table" id="ID-table-account" lay-filter="ID-table-account"></table>
                <!--分页栏-->
                <script type="text/html" id="ID-table-account-pagebar">
                    <div class="layui-btn-container" >
                    </div>
                </script>
            </div>
        </div>
    </div>
</body>
</html>
<script type="text/javascript" src="~/common/qs.js"></script>
<script type="text/javascript" src="~/schema/ZSchema-browser-min.js"></script>
<script type="text/javascript" src="~/schema/jsonSchemas.js"></script>
<script type="text/javascript" src="~/common/dayjs.min.js"></script>
<script type="text/javascript" src="~/layuiadmin/layui/layui.js"></script>
<script type="text/javascript">
    layui.config({
        base: '../layuiadmin/' //静态资源所在路径
    }).extend({
        index: 'lib/index' //主入口模块
    }).use(function () {

        var table = layui.table,
            form = layui.form,
            util = layui.util,
            layer = layui.layer;

        //表单渲染
        table.render({
            elem: '#ID-table-account'
            , url: '/api/accounts' // 此处为静态模拟数据，实际使用时需换成真实接口
            , request: {
                pageName: 'pageIndex',  //替换分页的字段名称，后端可识别
                limitName: 'pageSize'
            }
            //除分页固定参数之后，其他的拼接参数
            , where: {
                offset: 0,                //数据偏移量
                orderby: "created desc"   //默认排序
            }
            , page: { // 支持传入 laypage 组件的所有参数（某些参数除外，如：jump/elem） - 详见文档
                layout: ['limit', 'count', 'prev', 'page', 'next', 'skip'] //自定义分页布局
                //,curr: 5 //设定初始在第 5 页
                , groups: 1 //只显示 1 个连续页码
                , limit: 10   //页面数量限制
            }
            , skin: 'default' // 表格风格
            , even: true   //开启偶数行背景色
            , css: [ // 直接给当前表格主容器重置 css 样式
                '.layui-table-page{text-align: center;}' // 让分页栏居中
            ].join('')
            , toolbar: '#ID-table-account-toolbar'
            , pagebar: '#ID-table-account-pagebar' // 分页栏模板
            //,totalRow: true // 开启合计行
            , cols: [[                               // 列名
                { type: 'checkbox', fixed: 'left' }
                , { field: 'uId', title: 'ID' }
                , { field: 'name', title: '用户名' }
                , { field: 'phone', title: '手机号' }
                , {
                    field: 'sex', title: '性别', width: 60, templet: function (d) {
                        if (d.sex === '男性') {
                            return '<span style="color: blue" title="男性">♂</span>';
                        } else if (d.sex === '女性') {
                            return '<span style="color: pink" title="女性">♀</span>';
                        } else {
                            return '<span style="color: dark" title="跨性别">⚧️</span>';
                        }
                    }
                }
                , { field: 'jobStatus', title: '工作状态' }
                , { field: 'lastLoginIp', title: '最后登录IP' }
                , {
                    field: 'lastLoginTime', title: '最后登录时间', templet: function (d) {
                        if (dayjs(d.lastLoginTime).isValid())
                            return `${dayjs(d.lastLoginTime).format('YYYY-MM-DD hh:mm:ss')}`
                        else return ``
                    }
                }
                , {
                    field: 'created', title: '创建时间', templet: function (d) {
                        return `${dayjs(d.created).format('YYYY-MM-DD hh:mm:ss')}`
                    }
                }
                , {
                    field: 'status', title: '账号状态', templet: function (d) {
                        if (d.status === "启用") {
                            return `<span class="layui-badge  layui-bg-green" > ${d.status} </span>`
                        } else if (d.status === "禁用")
                            return `<span class="layui-badge" > ${d.status} </span>`
                        else {
                            return `<span class="layui-badge layui-bg-orange" > ${d.status} </span>`
                        }
                    }
                }
                ,{
                    field: 'right', title: '操作', toolbar: "#cell-operation"
                }
            ]]
            , response: {
                statusCode: 200 // 重新规定成功的状态码为 200，table 组件默认为 0
            }
            , parseData: function (res) {  //转换后端返回的数据格式
                return {
                    "code": res.status,
                    "msg": res.uimsg,
                    "count": res.data.totalCount,
                    "data": res.data.list
                };
            }
        });

        //【添加账号】
        util.on("lay-on", {
            "add": function () {
                layer.open({
                    title: "添加账号",
                    type: 2,
                    area: ['480px', '455px'],
                    content: 'accounts/create',
                    btn: ["提交", '取消'],
                    yes: function (index, layero) {
                        var iframeWindow = window['layui-layer-iframe' + index]
                            //, submitID = 'LAY-account-create'
                            , submitFilter = 'form-account-filter'

                        //1.获取表单数据
                        let formData = iframeWindow.layui.form.val(submitFilter)
                        //2.json schema 校验表单数据
                        if (formData != "{}" && formData != "") {
                            let schemas = jsonSchemas.getSchema("account-create")
                            if (schemas.res == false) {
                                layer.msg(schemas.msg)
                                return;
                            }
                            let validator = new ZSchema();
                            validator.validate(formData, schemas.data, function (err, valid) {
                                if (!valid) {
                                    layer.msg(`${err[err.length - 1].title}：${err[err.length - 1].message}`)
                                    return
                                }
                                //3.提交表单数据
                                createAccount(formData, index);
                            });
                        }
                    }
                })
            }
        })

        //【编辑账号】触发单元格工具事件
        table.on('tool(ID-table-account)', function (obj) {
            var data = obj.data; // 获取当前表格属性配置项
            switch(obj.event){
                case 'edit':
                    //console.log(data,Qs.stringify(data))
                    let params=Qs.stringify(data);
                    layer.open({
                        title: "编辑账号",
                        type: 2,
                        area: ['480px', '455px'],
                        content: `accounts/edit?${params}`,
                        btn: ["提交", '取消'],
                        yes: function (index, layero) {
                            var iframeWindow = window['layui-layer-iframe' + index]
                                //, submitID = 'LAY-account-create'
                                , submitFilter = 'LAY-account-edit-submit'
                            //1.获取表单数据
                            let formData = iframeWindow.layui.form.val(submitFilter)
                            //2.json schema 校验表单数据
                            if (formData != "{}" && formData != "") {
                                let schemas = jsonSchemas.getSchema("account-edit")
                                if (schemas.res == false) {
                                    layer.msg(schemas.msg)
                                }
                                let validator = new ZSchema();
                                validator.validate(formData, schemas.data, function (err, valid) {
                                    if (!valid) {
                                        layer.msg(`${err[err.length - 1].title}：${err[err.length - 1].message}`)
                                        return
                                    }
                                    //3.提交表单数据
                                    editAccount(formData, index);
                                });
                            }
                        }
                    })
            }
        })

        /**
        * bref fetch 修改账号
        * param data json格式的表单参数
        * param iframeIndex 弹窗的 index
        */
        async function editAccount(data, iframeIndex) {
            let loadIndex = layer.load(0);
            await fetch(`/api/accounts`,
                {
                    method: 'patch',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(result => {
                    layer.close(loadIndex);
                    if (result.status == 200) {
                        table.reload('ID-table-account');
                        layer.close(iframeIndex); //关闭弹层
                        layer.msg("编辑账号成功");
                    } else {
                        layer.msg(result.uimsg);
                    }
                })
                .catch(function (ex) {
                    layer.close(loadIndex);
                    console.log('parsing failed', ex);
                })
        }


        /**
         * bref fetch 创建账号
         * param data json格式的表单参数
         * param iframeIndex 弹窗的 index
         */
        async function createAccount(data, iframeIndex) {
            let loadIndex = layer.load(0);
            await fetch(`/api/accounts`,
                {
                    method: 'post',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(result => {
                    layer.close(loadIndex);
                    if (result.status == 200) {
                        table.reload('ID-table-account');
                        layer.close(iframeIndex); //关闭弹层
                        layer.msg("账号添加成功");
                    } else {
                        layer.msg(result.uimsg);
                    }
                })
                .catch(function (ex) {
                    layer.close(loadIndex);
                    console.log('parsing failed', ex);
                })
        }
    })
</script>