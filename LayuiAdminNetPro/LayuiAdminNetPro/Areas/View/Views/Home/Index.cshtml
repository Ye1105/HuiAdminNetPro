<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="renderer" content="webkit">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <title>LayuiadminNetPro</title>
    <link type="text/css" rel="stylesheet" href="~/layuiadmin/layui/css/layui.css" media="all" />
    <link type="text/css" rel="stylesheet" href="~/layuiadmin/style/admin.css" media="all">
</head>
<body class="layui-layout-body">
    <div id="LAY_app">
        <div class="layui-layout layui-layout-admin">
            <!--头部区域-->
            <div class="layui-header">
                <!-- 头部区域 -->
                <ul class="layui-nav layui-layout-left">
                    <li class="layui-nav-item layadmin-flexible" lay-unselect>
                        <a href="javascript:;" layadmin-event="flexible" title="侧边伸缩">
                            <i class="layui-icon layui-icon-shrink-right" id="LAY_app_flexible"></i>
                        </a>
                    </li>
                    <li class="layui-nav-item" lay-unselect>
                        <a href="javascript:;" layadmin-event="refresh" title="刷新">
                            <i class="layui-icon layui-icon-refresh-3"></i>
                        </a>
                    </li>
                </ul>
                <ul class="layui-nav layui-layout-right" lay-filter="layadmin-layout-right">
                    <!--主题-->
                    <li class="layui-nav-item layui-hide-xs" lay-unselect>
                        <a href="javascript:;" layadmin-event="theme">
                            <i class="layui-icon layui-icon-theme"></i>
                        </a>
                    </li>
                    <!--标签-->
                    <li class="layui-nav-item layui-hide-xs" lay-unselect>
                        <a href="javascript:;" layadmin-event="note">
                            <i class="layui-icon layui-icon-note"></i>
                        </a>
                    </li>
                    <!-- 基本信息/修改密码/退出-->
                    <li class="layui-nav-item" lay-unselect>
                        <a href="javascript:;">
                            <cite id="account_name"></cite>
                        </a>
                        <dl class="layui-nav-child">
                            <dd><a href="javascript:;" lay-on="info">基本资料</a></dd>
                            <dd><a href="javascript:;" lay-on="psdEdit">修改密码</a></dd>
                            <dd style="text-align:center;"><a href="javascript:;" lay-on="logout">退出</a></dd>
                        </dl>
                    </li>
                    <!--全屏-->
                    <li class="layui-nav-item layui-hide-xs" lay-unselect>
                        <a href="javascript:;" layadmin-event="fullscreen">
                            <i class="layui-icon layui-icon-screen-full"></i>
                        </a>
                    </li>
                </ul>
            </div>

            <!-- 侧边菜单 -->
            <div class="layui-side layui-side-menu">
                <div class="layui-side-scroll">
                    <div class="layui-logo" lay-href="home/console.html">
                        <span>LayuiAdminNetPro</span>
                    </div>

                    <ul class="layui-nav layui-nav-tree" lay-shrink="all" id="LAY-system-side-menu"
                        lay-filter="layadmin-system-side-menu">
                    </ul>
                </div>
            </div>

            <!-- 页面标签 -->
            <div class="layadmin-pagetabs" id="LAY_app_tabs">
                <div class="layui-icon layadmin-tabs-control layui-icon-prev" layadmin-event="leftPage"></div>
                <div class="layui-icon layadmin-tabs-control layui-icon-next" layadmin-event="rightPage"></div>
                <div class="layui-icon layadmin-tabs-control layui-icon-down">
                    <ul class="layui-nav layadmin-tabs-select" lay-filter="layadmin-pagetabs-nav">
                        <li class="layui-nav-item" lay-unselect>
                            <a href="javascript:;"></a>
                            <dl class="layui-nav-child layui-anim-fadein">
                                <dd layadmin-event="closeThisTabs"><a href="javascript:;">关闭当前标签页</a></dd>
                                <dd layadmin-event="closeOtherTabs"><a href="javascript:;">关闭其它标签页</a></dd>
                                <dd layadmin-event="closeAllTabs"><a href="javascript:;">关闭全部标签页</a></dd>
                            </dl>
                        </li>
                    </ul>
                </div>
                <div class="layui-tab" lay-unauto lay-allowClose="true" lay-filter="layadmin-layout-tabs">
                    <ul class="layui-tab-title" id="LAY_app_tabsheader">
                        <li lay-id="home/console.html" lay-attr="home/console.html" class="layui-this">
                            <i class="layui-icon layui-icon-home"></i>
                        </li>
                    </ul>
                </div>
            </div>

            <!-- 主体内容 -->
            <div class="layui-body" id="LAY_app_body">
                <div class="layadmin-tabsbody-item layui-show">
                    <iframe src="/welcome/menu" frameborder="0" class="layadmin-iframe"></iframe>
                </div>
            </div>

            <!-- 辅助元素，一般用于移动设备下遮罩 -->
            <div class="layadmin-body-shade" layadmin-event="shade"></div>
        </div>
    </div>
</body>
</html>
<script type="text/javascript" src="~/schema/ZSchema-browser-min.js"></script>
<script type="text/javascript" src="~/schema/jsonSchemas.js"></script>
<script type="text/javascript" src="~/common/docCookies.js"></script>
<script type="text/javascript" src="~/layuiadmin/layui/layui.js"></script>
<script type="text/javascript">
    layui.config({
        base: '../layuiadmin/' //静态资源所在路径
    }).extend({
        index: 'lib/index' //主入口模块
    }).use(["index", "util", "layer"], function () {

        var util = layui.util,
            layer = layui.layer,
            element = layui.element,
            $ = layui.$;

        getMenu();

        //首页侧边栏动态展示界面
        async function getMenu() {
            let loadIndex = layer.load(0);
            await fetch(`/api/home`)
                .then(response => response.json())
                .then(result => {
                    layer.close(loadIndex);
                    if (result.status == 200) {
                        //解构赋值
                        const { account, menus } = result.data
                        //console.log(account, menus)
                        //账号信息赋值
                        if (account != null) {
                            $("#account_name").text(account.name)
                        }
                        //侧边菜单栏信息赋值
                        if (menus != null && menus.length > 0) {
                            //console.log(menus)
                            let renderHtml = ""
                            //顶级菜单栏
                            const preMenu = menus.filter(x => x.adminRoute.pId == "00000000-0000-0000-0000-000000000000")
                            //console.log(preMenu)
                            if (preMenu != null && preMenu.length > 0) {
                                preMenu.forEach((ele, index) => {

                                    renderHtml += ` <li data-name="${ele.adminRoute.name}" class="layui-nav-item ${ele.adminRoute.name == "主页" ? "layui-nav-itemed" : ""}"> `
                                    renderHtml += `<a href="javascript:;" lay-tips="${ele.adminRoute.name}" lay-direction="${ele.adminRoute.order}">`
                                    renderHtml += `<i class= "layui-icon layui-icon-set"> </i>`
                                    renderHtml += `<cite>${ele.adminRoute.name} </cite>`
                                    renderHtml += `</a>`
                                    //获取当前顶级菜单下的菜单列表
                                    const childMenu = menus.filter(x => x.adminRoute.pId == ele.adminRoute.id)
                                    if (childMenu != null && childMenu.length > 0) {
                                        //console.log(childMenu)
                                        if (ele.adminRoute.name == "主页") {
                                            renderHtml += `<dl class="layui-nav-child">`
                                            childMenu.forEach(elem => {
                                                renderHtml += `<dd>`
                                                renderHtml += `<a lay-href="${elem.adminRoute.route}/menu" class="layui-this">${elem.adminRoute.name}</a>`
                                                renderHtml += `</dd>`
                                            });
                                            renderHtml += `</dl>`
                                        } else {
                                            renderHtml += `<dl class="layui-nav-child">`
                                            childMenu.forEach(elem => {
                                                renderHtml += `<dd>`
                                                renderHtml += `<a lay-href="${elem.adminRoute.route}/menu">${elem.adminRoute.name}</a>`
                                                renderHtml += `</dd>`
                                            });
                                            renderHtml += `</dl>`
                                        }
                                    }
                                    renderHtml += `</li>`
                                });
                            }
                            $("#LAY-system-side-menu").html(renderHtml)
                            element.render('nav', 'layadmin-system-side-menu');
                        }
                    }
                })
                .catch(function (ex) {
                    layer.close(loadIndex);
                    console.log('parsing failed', ex);
                })
        }

        util.on("lay-on", {
            //退出网站
            'logout': function () {
                layer.confirm('确定登出吗?', {
                    title: false,
                    btn: ["确定", "关闭"],
                }, function () {

                    //console.log('用户登出网站')
                    docCookies.removeItem(".AspNetCore.Token");

                    let loadIndex = layer.load(0);
                    // 模拟关闭
                    setTimeout(function () {
                        layer.close(loadIndex)
                        window.location.href = "/login";
                    }, 1000);
                    //window.location.href = "/login"
                })
            },
            //个人信息界面
            'info': function () {
                layer.open({
                    title: "个人信息",
                    type: 2,
                    area: ['480px', '480px'],
                    content: `/persons`,
                    btn: ['返回'],
                })
            },
            //修改个人信息的密码
            'psdEdit': function () {
                console.log("修改密码")

                layer.open({
                    title: "修改密码",
                    type: 2,
                    area: ['480px', '268px'],
                    content: `/persons/psd`,
                    btn: ["提交", '取消'],
                    yes: function (index, layero) {
                        var iframeWindow = window['layui-layer-iframe' + index]
                            //, submitID = 'LAY-account-create'
                            , submitFilter = 'LAY-person-psd-submit'
                        //1.获取表单数据
                        let formData = iframeWindow.layui.form.val(submitFilter)
                        console.log(formData)
                        //2.json schema 校验表单数据
                        if (formData != {}) {
                            let schemas = jsonSchemas.getSchema("person-psd")
                            if (schemas.res == false) {
                                layer.msg(schemas.msg)
                            }
                            let validator = new ZSchema();
                            validator.validate(formData, schemas.data, function (err, valid) {
                                if (!valid) {
                                    layer.msg(`${err[err.length - 1].title}：${err[err.length - 1].message}`)
                                    return
                                }
                                //判定 password 和 cpassword 的值是否一致
                                if (formData["password"] !== formData["cpassword"]) {
                                    layer.msg("两次输入的密码不一致");
                                    return;
                                }

                                var param = {
                                    "method": "修改密码",
                                    password: formData["password"]
                                }
                                //fetch 解锁选中的账户
                                updatePerson(param, index);
                            });
                        }
                    }
                })
            }
        })

        /**
        * bref fetch 修改账号状态
        * param data json格式的表单参数
        * param layerIndex 弹窗的 index
        */
        async function updatePerson(data, layerIndex) {
            let loadIndex = layer.load(0);
            await fetch(`/api/persons`,
                {
                    method: 'patch',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(result => {
                    layer.close(loadIndex);
                    if (result.status == 200) {
                        layer.close(layerIndex); //关闭弹层
                        layer.msg("修改密码成功，2秒后跳转到登录界面", { time: 2000 }, function(){
                            window.location.href = "/login"
                        });
                    } else {
                        layer.msg(result.uimsg);
                    }
                })
                .catch(function (ex) {
                    layer.close(loadIndex);
                    console.log('parsing failed', ex);

                })
        }
    })
</script>